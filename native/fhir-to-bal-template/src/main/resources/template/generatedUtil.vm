#set($sqBrackets=[])
// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.

// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.
//
//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This file is auto-generated by WSO2 Healthcare Team for managing utility functions.
// It should not be modified by hand.

#foreach($import in $utilImpl.getImportsList())
import $import ;
#end

isolated final readonly & r4:FHIRSourceConnectInteraction srcConnectImpl = {
#**##foreach($entry in $utilImpl.getInteractionImpl().entrySet())
    #**#$entry.getKey(): $entry.getValue()#if($foreach.hasNext),
#**##end
#**##end
#**#
#**#};

//Default profile is set to international Resource URL
final readonly & string defaultProfile = "$utilImpl.getDefaultProfile()";

#**##foreach($function in $utilImpl.getImplFunctions())
#**#isolated function $function.getSignature()(#foreach($param in $function.getInputParams())$param.toString()#if($foreach.hasNext),#**##end#end) returns #foreach($param in $function.getOutputParams())$param.toString()#if($foreach.hasNext)|#end#**##end {
    #**#lock {
        #**#$utilImpl.getFhirVersion():FHIRContext fhirContext = check $utilImpl.getFhirVersion():getFHIRContext(ctx);
        #**##if($function.getInteraction() == "search")
        #**#value:Cloneable|object {} activeProfile = defaultProfile;
        #**#// Since profile based function implementation is applied for search operation,
        #**#// active profile is retreived from the context.
        #**#if fhirContext.getRequestSearchParameters().hasKey("_profile") {
            #**#activeProfile = ctx.get("_OH_activeProfile");
        #**#}

        #**#$utilImpl.getResourceType()SourceConnect sourceConnect = profileImpl.get(defaultProfile);
        #**#if activeProfile is string {
            #**#log:printDebug(string `[SearchImpl] Current profile is  ${activeProfile}`);
            #**#sourceConnect = profileImpl.get(activeProfile);
        #**#}
        #**#log:printDebug(string `[SearchImpl] Calling source system with parameters  ${params.toBalString()}`);
        #**#$utilImpl.getFhirVersion():Bundle|$utilImpl.getResourceType()$sqBrackets|$utilImpl.getFhirVersion():FHIRError resourceResults = check sourceConnect.search(params.clone(), fhirContext);
        #**#$utilImpl.getFhirVersion():BundleEntry[] entries = [];

        #**#if resourceResults is $utilImpl.getFhirVersion():Bundle {
            #**#entries = resourceResults.entry ?: [];
        #**#} else if resourceResults is $utilImpl.getResourceType()$sqBrackets {
            #**#foreach $utilImpl.getResourceType() item in resourceResults {
                #**#$utilImpl.getFhirVersion():BundleEntry entry = {
                    #**#fullUrl: "",
                    #**#'resource: item
                #**#};
                #**#entries.push(entry);
            #**#}
        #**#}
        #**#log:printDebug(string `[SearchImpl] Resultant entries list:  ${entries.toJsonString()}`);
        #**#return entries.clone();
        #**##end
        #**##if($function.getInteraction() == "read")

        #**#log:printDebug(string `[ReadImpl] Calling source system with Id:  ${id}`);
        #**#$utilImpl.getResourceType()SourceConnect sourceConnect = profileImpl.get(defaultProfile);

        #**#$utilImpl.getResourceType()|$utilImpl.getFhirVersion():FHIRError resourceResult = check sourceConnect.read(id, fhirContext);

        #**#$utilImpl.getFhirVersion():FHIRResourceEntity entity = new (check resourceResult);
        #**#return entity;
        #**##end
        #**##if($function.getInteraction() == "create")
        #**#$utilImpl.getResourceType()SourceConnect sourceConnect = profileImpl.get(defaultProfile);

        #**#value:Cloneable resourceRecord = resourceEntity.unwrap();

        #**#if resourceRecord is $utilImpl.getResourceType() {
            #**#log:printDebug(string `[CreateImpl] Request payload: ${resourceRecord.toString()}`);
            #**#string|$utilImpl.getFhirVersion():FHIRError createResponse = check sourceConnect.create(resourceEntity, fhirContext);
            #**#return createResponse;
        #**#} else {
            #**#string diagMsg = string `Expected $utilImpl.getFhirVersion():$utilImpl.getResourceType() FHIR resource model not found. Instead, found a model of type:" ${(typeof resourceRecord).toBalString()}`;
            #**#return $utilImpl.getFhirVersion():createInternalFHIRError("Incoming $utilImpl.getFhirVersion():$utilImpl.getResourceType() resource model not found", $utilImpl.getFhirVersion():ERROR, $utilImpl.getFhirVersion():PROCESSING_NOT_FOUND, diagnostic = diagMsg);
        #**#}
        #**##end
    #**#
    #**#}
#**#}
#**##end

public type $utilImpl.getResourceType()SourceConnect object {
    isolated function profile() returns $utilImpl.getFhirVersion():uri;
#**##foreach($function in $utilImpl.getImplFunctions())
    #**#isolated function $function.getInteraction()(#foreach($param in $function.getSourceConnectFunction().getInputParams())$param.toString()#if($foreach.hasNext),#**##end#end) returns #foreach($param in $function.getSourceConnectFunction().getOutputParams())$param.toString()#if($foreach.hasNext)|#end#**##end;
#**##end
#**#};

public type ProfileImplementations record {
    map<$utilImpl.getResourceType()SourceConnect> sourceConnectImplementations;
};
