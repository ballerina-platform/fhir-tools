#set($sqBrackets=[])
// // Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.

// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.
//
// AUTO-GENERATED FILE.
//
// This file is auto-generated by WSO2 Healthcare Team for implementing source system connections.
// Developers are allowed modify this file as per the requirement.

#foreach($import in $profile.getImportsList())
import $import ;
#end

configurable string sourceSystem = "http://localhost:9091";

final string READ = sourceSystem.endsWith("/") ? "read/" : "/read/";
final string SEARCH = sourceSystem.endsWith("/") ? "search" : "/search";
final string CREATE = sourceSystem.endsWith("/") ? "create" : "/create";

final http:Client sourceEp = check new (sourceSystem);

public isolated class $profile.getNamePrefix()SourceConnect {

    *$profile.getResourceType()SourceConnect;
    isolated function profile() returns $profile.getFhirVersion():uri {
        return "$profile.getUrl()";
    }

    isolated function read(string id, $profile.getFhirVersion():FHIRContext fhirContext) returns $profile.getResourceType()|$profile.getFhirVersion():FHIRError {

        http:Response|http:ClientError res =  sourceEp->get(READ + id);
        if (res is http:ClientError) {
            $profile.getFhirVersion():FHIRError fhirError = $profile.getFhirVersion():createFHIRError("Error occured when calling the source system.", $profile.getFhirVersion():CODE_SEVERITY_ERROR,$profile.getFhirVersion():TRANSIENT_EXCEPTION);
            return fhirError;
        } else {
            json|error payload = res.getJsonPayload();
            if (payload is error) {
                $profile.getFhirVersion():FHIRError fhirError = $profile.getFhirVersion():createFHIRError("Unable to extract JSON payload from the source response.", $profile.getFhirVersion():CODE_SEVERITY_ERROR,$profile.getFhirVersion():TRANSIENT_EXCEPTION);
                return fhirError;
            } else {
                $profile.getFhirVersion():$profile.getResourceType()|error fhirResource = payload.cloneWithType($profile.getFhirVersion():$profile.getResourceType());
                if (fhirResource is error) {
                    $profile.getFhirVersion():FHIRError fhirError = $profile.getFhirVersion():createFHIRError("Did not get a FHIR Resource from source.", $profile.getFhirVersion():CODE_SEVERITY_ERROR,$profile.getFhirVersion():TRANSIENT_EXCEPTION);
                    return fhirError;
                } else {
                    return fhirResource;
                }
            }
        }
    }

    isolated function search(map<$profile.getFhirVersion():RequestSearchParameter$sqBrackets> params, $profile.getFhirVersion():FHIRContext fhirContext) returns $profile.getFhirVersion():Bundle|$profile.getResourceType()$sqBrackets|$profile.getFhirVersion():FHIRError {

        //convert search parameters to map<string|string$sqBrackets>
        map<string|string$sqBrackets> searchParams = {};
        foreach var [key, value] in params.entries() {
            foreach var param in value {
                searchParams[key] = param.value;
            }
        }
        //convert search parameters to query string
        string queryString = "";
        foreach var [key, value] in searchParams.entries() {
            // check if value is an array
            if (value is string$sqBrackets) {
                foreach var v in value {
                    queryString = queryString + key + "=" + v + "&";
                }
            } else {
                queryString = queryString + key + "=" + <string>value + "&";
            }
        }
        //remove last & if query string is not empty
        if (queryString != "") {
            queryString = "?" + queryString.substring(0, queryString.length() - 1);
        }

        http:Response|http:ClientError res = sourceEp->get(SEARCH + queryString);
        if (res is http:ClientError) {
            $profile.getFhirVersion():FHIRError fhirError = $profile.getFhirVersion():createFHIRError("Error occured when calling the source system.", $profile.getFhirVersion():CODE_SEVERITY_ERROR, $profile.getFhirVersion():TRANSIENT_EXCEPTION);
            return fhirError;
        } else {
            json|error payload = res.getJsonPayload();
            if (payload is error) {
                $profile.getFhirVersion():FHIRError fhirError = $profile.getFhirVersion():createFHIRError("Unable to extract JSON payload from the source response.", $profile.getFhirVersion():CODE_SEVERITY_ERROR, $profile.getFhirVersion():TRANSIENT_EXCEPTION);
                return fhirError;
            } else {
                if (payload is json$sqBrackets) {
                    json$sqBrackets payloadArray = <json$sqBrackets>payload;
                    $profile.getResourceType()$sqBrackets fhirResources = $sqBrackets;
                    foreach var p in payloadArray {
                        $profile.getFhirVersion():$profile.getResourceType()|error fhirResource = p.cloneWithType($profile.getFhirVersion():$profile.getResourceType());
                        if (fhirResource is error) {
                            $profile.getFhirVersion():FHIRError fhirError = $profile.getFhirVersion():createFHIRError("Did not get a FHIR Resource from source.", $profile.getFhirVersion():CODE_SEVERITY_ERROR, $profile.getFhirVersion():TRANSIENT_EXCEPTION);
                            return fhirError;
                        } else {
                            fhirResources.push(fhirResource);
                        }
                    }
                    return fhirResources;
                } else {
                    $profile.getFhirVersion():FHIRError fhirError = $profile.getFhirVersion():createFHIRError("Did not get a JSON$sqBrackets from the source.", $profile.getFhirVersion():CODE_SEVERITY_ERROR, $profile.getFhirVersion():TRANSIENT_EXCEPTION);
                    return fhirError;
                }
            }
        }
    }

    isolated function create($profile.getFhirVersion():FHIRResourceEntity resourceEntity, $profile.getFhirVersion():FHIRContext fhirContext) returns string|$profile.getFhirVersion():FHIRError {

        //Implement source system connection here and persist FHIR resource.
        //Must respond with ID in order to create Location header

        $profile.getFhirVersion():FHIRError fhirError = $profile.getFhirVersion():createFHIRError("Not implemented", $profile.getFhirVersion():CODE_SEVERITY_ERROR, $profile.getFhirVersion():TRANSIENT_EXCEPTION, httpStatusCode = 415);
        return fhirError;
    }
}
