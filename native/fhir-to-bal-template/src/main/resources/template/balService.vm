// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.

// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.
//
//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This file is auto-generated by WSO2 Healthcare Team for managing utility functions.
// Developers are allowed modify this file as per the requirement.

#foreach($import in $service.getImportsList())
import $import ;
#end

# Generic type to wrap all implemented profiles.
# Add required profile types here.
# public type $service.getName() $service.getFhirVersion():$service.getName()|<other_$service.getName()_Profile>;
public type $service.getName()#**##foreach($profile in $service.getProfileList()) $profile.getPackagePrefix():$profile.getName() #if($foreach.hasNext)| #end#end;

//add implemented profiles to this map. profileURL:implementation
isolated final map<$service.getName()SourceConnect> profileImpl = {
    #**##foreach($profile in $service.getProfileList())
    #**#"$profile.getUrl()": new $profile.getNamePrefix()SourceConnect()#if($foreach.hasNext),
    #**##end
    #**##end};


# A service representing a network-accessible API
# bound to port `9090`.
@http:ServiceConfig{
    interceptors: [
    #foreach($interceptor in $service.getInterceptorsList())
    #**#new $service.getFhirVersion():$interceptor(apiConfig),
    #end
    #**#new $service.getFhirVersion():FHIRResponseErrorInterceptor(),
        new $service.getFhirVersion():FHIRRequestErrorInterceptor(),
        new $service.getFhirVersion():FHIRResponseInterceptor(apiConfig)
    ]
}
service / on new http:Listener(9090) {

    #**##foreach($resourceMethod in $service.getResourceMethods())
    #**#$resourceMethod.getDescriptionComment()
    #**#isolated resource function $resourceMethod.getHttpMethod() fhir/$service.getFhirVersion()/$resourceMethod.getResourceContext() (http:RequestContext ctx, http:Request request) returns @http:Payload {mediaType: ["application/fhir+json", "application/fhir+xml"]} json|xml|$service.getFhirVersion():FHIRError {

            #**#$service.getFhirVersion():FHIRContext fhirContext = check $service.getFhirVersion():getFHIRContext(ctx);
            #**#$service.getFhirVersion():FHIRRequest resourceName = <$service.getFhirVersion():FHIRRequest>fhirContext.getFHIRRequest();

            #**##if($resourceMethod.getType()=="search")$service.getFhirVersion():RequestSearchParameter[]? & readonly profileUrls = fhirContext.getRequestSearchParameter("_profile");
            #**#log:printDebug(string `FHIR API request is received. Interaction: SEARCH, [profiles]: ${profileUrls.toBalString()}
            #**#[resource]: ${resourceName.getResourceType().toBalString()}`);
            #**##else log:printDebug(string `FHIR API request is received. Interaction: $resourceMethod.getType(),
            #**#[resource]: \${resourceName.getResourceType().toBalString()}`);
            #end

            #**#// Passing the Interaction processing to the $service.getFhirVersion() package with current context.
            #**#$service.getFhirVersion():FHIRError? process = $service.getFhirVersion():processFHIRSourceConnections(srcConnectImpl, ctx);

            #**#if process is error {
                #**#log:printError("Error in source connection processing");
                #**#return process;
            #**#}

            #**#log:printDebug("[END]FHIR interaction : $resourceMethod.getType()");
            #**#return { };

        #**#}
    #end

}
