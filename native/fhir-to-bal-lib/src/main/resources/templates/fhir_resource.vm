// Copyright (c) ${licenseYear}, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.

// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.

// AUTO-GENERATED FILE.
// This file is auto-generated by WSO2 Healthcare.

#foreach($import in $imports)
#if($import)
import $import.toString();
#end
#end

public const string PROFILE_BASE_${util.resolveSpecialCharacters($resourceName.toUpperCase())} = "${profile}";
#if(!$isBasePackage)
public const RESOURCE_NAME_${util.resolveSpecialCharacters($resourceName.toUpperCase())} = "${baseType}";
#else
public const RESOURCE_NAME_${util.resolveSpecialCharacters($resourceName.toUpperCase())} = "${resourceType}";
#end

# FHIR $resourceType resource record
#
# + resourceType - The type of the resource describes
#foreach($element in ${annotationElements})
# + $util.resolveSpecialCharacters($util.resolveKeywordConflict($element.getName())) - $element.getDescription()
#end
@${importIdentifier}ResourceDefinition {
    resourceType: "${resourceType}",
    baseType: ${importIdentifier}DomainResource,
    profile: "${profile}",
    elements: {
    #foreach($element in ${annotationElements})
    "${element.getName()}" : {
            name: "${element.getName()}",
            dataType: #if(!$dataTypes.contains($element.getDataType()))${importIdentifier}${element.getDataType()}#else${element.getDataType()}#end,
            min: ${element.getMin()},
            max: ${element.getMax()},
            isArray: ${element.isArray()},
    #if($element.getValueSet())
        path: "${element.getPath()}",
            valueSet: "${element.getValueSet()}"
    #else
        path: "${element.getPath()}"
    #end
    }#if ($foreach.count != $annotationElements.size()),#end

    #end
},
    serializers: {
        'xml: ${importIdentifier}fhirResourceXMLSerializer,
        'json: ${importIdentifier}fhirResourceJsonSerializer
    },
    validator: ${importIdentifier}validateFHIRResource
}
public type $util.resolveSpecialCharacters($resourceName) record {|
    *${importIdentifier}DomainResource;

    RESOURCE_NAME_${util.resolveSpecialCharacters($resourceName.toUpperCase())} resourceType = RESOURCE_NAME_${util.resolveSpecialCharacters($resourceName.toUpperCase())};

    Base${util.resolveSpecialCharacters($resourceName)}Meta meta = {
        profile : [PROFILE_BASE_${util.resolveSpecialCharacters($resourceName.toUpperCase())}]
    };
#foreach($element in $resourceElements)
#if($element.getDataType() != "Meta")
#set($min = "1")
#set($max = "*")
#if( ($element.min == $min ) && ($element.max == $max ) )
    @constraint:Array {
       minLength: 1
    }
#end
    #if(!$dataTypes.contains($element.getDataType()))${importIdentifier}#end${element.getDataType()}#if($element.isArray())[]#end $util.resolveSpecialCharacters($util.resolveKeywordConflict($element.getName()))#if(!$element.isRequired())?#end;
#end
#end
|};

@${importIdentifier}DataTypeDefinition {
    name: "Base${resourceType}Meta",
    baseType: ${importIdentifier}Meta,
    elements: {},
    serializers: {
        'xml: ${importIdentifier}complexDataTypeXMLSerializer,
        'json: ${importIdentifier}complexDataTypeJsonSerializer
    }
}
public type Base${util.resolveSpecialCharacters($resourceName)}Meta record {|
    *${importIdentifier}Meta;

    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    ${importIdentifier}Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)

    ${importIdentifier}id versionId?;
    ${importIdentifier}instant lastUpdated?;
    ${importIdentifier}uri 'source?;
    ${importIdentifier}canonical[] profile = ["${profile}"];
    ${importIdentifier}Coding[] security?;
    ${importIdentifier}Coding[] tag?;
|};

#foreach($extendedElement in $extendedElements)
#if($extendedElement.getBalDataType().getType() == "record")
# FHIR $extendedElement.getTypeName() datatype record
#
#foreach($annotationElement in $extendedElement.getAnnotation().getElements())
# + $util.resolveSpecialCharacters($util.resolveKeywordConflict($annotationElement.getName())) - $annotationElement.getDescription()
#end
@${importIdentifier}DataTypeDefinition {
    name: "${extendedElement.getTypeName()}",
    baseType: $extendedElement.getAnnotation().getBaseType(),
    elements: {
    #foreach($annotationElement in $extendedElement.getAnnotation().getElements())
    "${annotationElement.getName()}": {
            name: "${annotationElement.getName()}",
            dataType: #if(!$dataTypes.contains($annotationElement.getDataType()))${importIdentifier}${annotationElement.getDataType()}#else${annotationElement.getDataType()}#end,
            min: $annotationElement.getMin(),
            max: $annotationElement.getMax(),
            isArray: $annotationElement.isArray(),
            description: "$annotationElement.getDescription()",
    #if($element.getValueSet())
        path: "${annotationElement.getPath()}",
        valueSet: "${annotationElement.getValueSet()}"
    #else
        path: "${annotationElement.getPath()}"
    #end
    }#if ($foreach.count != $extendedElement.getAnnotation().getElements().size()),#end

    #end
},
    serializers: {
        'xml: ${importIdentifier}complexDataTypeXMLSerializer,
        'json: ${importIdentifier}complexDataTypeJsonSerializer
    }
}
public type $util.resolveSpecialCharacters($extendedElement.getTypeName()) record {|
#foreach($childElement in $extendedElement.getElements())
#set($min = "1")
#set($max = "*")
#if( ($childElement.min == $min ) && ($childElement.max == $max ) )
    @constraint:Array {
       minLength: 1
    }
#end
    #if(!$dataTypes.contains($childElement.getDataType()))${importIdentifier}#end${childElement.getDataType()}#if($childElement.isArray())[]#end $util.resolveSpecialCharacters($util.resolveKeywordConflict($childElement.getName()))#if(!$childElement.isRequired())?#end;
#end
|};
#elseif($extendedElement.getBalDataType().getType() == "enum")
# $extendedElement.getTypeName() enum
public enum $util.resolveSpecialCharacters($extendedElement.getTypeName()) {
#foreach($childElement in $extendedElement.getElements())
   CODE_$childElement.getRootElementName().toUpperCase()_$util.resolveSpecialCharacters($childElement.getName()).toUpperCase() = "$childElement.getName()"#if($foreach.count != $extendedElement.getElements().size()),$newline#end
#end

}
#end

#end
