// Copyright (c) ${licenseYear}, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

#foreach($import in $imports)
#if($import)
import $import.toString();
#end
#end

public const string PROFILE_BASE_${util.resolveSpecialCharacters($resourceName.toUpperCase())} = "${profile}";
public const RESOURCE_NAME_${util.resolveSpecialCharacters($resourceName.toUpperCase())} = "${resourceType}";

# FHIR $resourceName resource record.
#
# + resourceType - The type of the resource describes
#foreach($element in $resourceElements)
# + $util.resolveSpecialCharacters($util.resolveKeywordConflict($element.getName())) - $element.getDescription()
#if($sliceElements.get($element.getPath()))
# * $element.getName() Slicings
#foreach($sliceElement in $sliceElements.get($element.getPath()))
#if ($sliceElement.getMax() == $INT_MAX)
#set($max = "*")
#else
#set($max = $sliceElement.getMax())
#end
# $foreach.count) $sliceElement.getDataType(): $sliceElement.getSummary()
#       - min = $sliceElement.getMin()
#       - max = $max
#
#end
#end
#end
@${importIdentifier}ResourceDefinition {
    resourceType: "${resourceType}",
    baseType: ${importIdentifier}DomainResource,
    profile: "${profile}",
    elements: {
    #foreach($element in ${annotationElements})
    "${element.getName()}" : {
            name: "${element.getName()}",
            dataType: #if(!$dataTypes.contains($element.getDataType()))${importIdentifier}$util.resolveSpecialCharacters($element.getDataType())#else$util.resolveSpecialCharacters($element.getDataType())#end,
            min: ${element.getMin()},
            max: ${element.getMax()},
            isArray: ${element.isArray()},
    #if($element.getValueSet())
        path: "${element.getPath()}",
            valueSet: "${element.getValueSet()}"
    #else
        path: "${element.getPath()}"
    #end
    }#if ($foreach.count != $annotationElements.size()),#end

    #end
},
    serializers: {
        'xml: ${importIdentifier}fhirResourceXMLSerializer,
        'json: ${importIdentifier}fhirResourceJsonSerializer
    }
}
public type $util.resolveSpecialCharacters($resourceName) record {|
    *${importIdentifier}DomainResource;

    RESOURCE_NAME_${util.resolveSpecialCharacters($resourceName.toUpperCase())} resourceType = RESOURCE_NAME_${util.resolveSpecialCharacters($resourceName.toUpperCase())};

#foreach($element in $resourceElements)
#set($min = 1)
#set($max = $INT_MAX)
#if( ($element.min >= $min ) && ($element.max == $max) )
    @constraint:Array {
       minLength: $element.getMin()
    }
#elseif( ($element.min >= $min ) && ($element.max > 1) )
    @constraint:Array {
       minLength: $element.getMin(),
       maxLength: $element.getMax()
    }
#end
    #if(!$dataTypes.contains($element.getDataType()))${importIdentifier}#end$util.resolveSpecialCharacters($element.getDataType())#if($element.isArray())[]#end $util.resolveKeywordConflict($util.resolveSpecialCharacters($element.getName()))#if(!$element.isRequired())?#end;
#end
    ${importIdentifier}Element ...;
|};

#foreach($extendedElement in $extendedElements)
#if($extendedElement.getBalDataType().getType() == "record")
# FHIR $extendedElement.getTypeName() datatype record.
#
#foreach($element in $extendedElement.getAnnotation().getElements())
# + $util.resolveSpecialCharacters($util.resolveKeywordConflict($element.getName())) - $element.getDescription()
#if($element.hasSlicedElements())
# * $element.getName() Slicing
#foreach($sliceElement in $element.getSlicedElements())
# $foreach.count) $sliceElement.getName(): $sliceElement.getSummary()
#       - min = $sliceElement.getMin()
#       - max = $sliceElement.getMax()
#
#end
#end
#end
@${importIdentifier}DataTypeDefinition {
    name: "${extendedElement.getTypeName()}",
    baseType: $extendedElement.getAnnotation().getBaseType(),
    elements: {
    #foreach($annotationElement in $extendedElement.getAnnotation().getElements())
    "${annotationElement.getName()}": {
            name: "${annotationElement.getName()}",
            dataType: #if(!$dataTypes.contains($annotationElement.getDataType()))${importIdentifier}$util.resolveSpecialCharacters($annotationElement.getDataType())#else$util.resolveSpecialCharacters($annotationElement.getDataType())#end,
            min: $annotationElement.getMin(),
            max: $annotationElement.getMax(),
            isArray: $annotationElement.isArray(),
            description: "$annotationElement.getDescription()",
    #if($element.getValueSet())
        path: "${annotationElement.getPath()}",
        valueSet: "${annotationElement.getValueSet()}"
    #else
        path: "${annotationElement.getPath()}"
    #end
    }#if ($foreach.count != $extendedElement.getAnnotation().getElements().size()),#end

    #end
},
    serializers: {
        'xml: ${importIdentifier}complexDataTypeXMLSerializer,
        'json: ${importIdentifier}complexDataTypeJsonSerializer
    }
}
public type $util.resolveSpecialCharacters($extendedElement.getTypeName()) record {|
#if ($extendedElement.getBaseType())
    *${importIdentifier}$extendedElement.getBaseType();
#end

#foreach($childElement in $extendedElement.getElements())
#set($min = 1)
#set($max = $INT_MAX)
#if( ($childElement.getMin() >= $min ) && ($childElement.getMax() == $max) )
    @constraint:Array {
       minLength: $childElement.getMin()
    }
#elseif( ($childElement.min >= $min ) && ($childElement.max > 1) )
    @constraint:Array {
       minLength: $childElement.getMin(),
       maxLength: $childElement.getMax()
    }
#end
#if($childElement.hasFixedValue())
    #if(!$dataTypes.contains($childElement.getDataType()))${importIdentifier}#end$util.resolveSpecialCharacters($childElement.getDataType())#if($childElement.isArray())[]#end $util.resolveSpecialCharacters($util.resolveKeywordConflict($childElement.getName()))#if(!$childElement.isRequired())?#end = #if($childElement.isArray())[#end#foreach($value in $childElement.getFixedValue())"$value"#if($foreach.count != $childElement.getFixedValue().size()),#end#end#if($childElement.isArray())]#end;
#else
    #if(!$dataTypes.contains($childElement.getDataType()))${importIdentifier}#end$util.resolveSpecialCharacters($childElement.getDataType())#if($childElement.isArray())[]#end $util.resolveSpecialCharacters($util.resolveKeywordConflict($childElement.getName()))#if(!$childElement.isRequired())?#end;
#end
#end
|};
#elseif($extendedElement.getBalDataType().getType() == "enum")
# $extendedElement.getTypeName() enum
public enum $util.resolveSpecialCharacters($extendedElement.getTypeName()) {
#foreach($childElement in $extendedElement.getElements())
   CODE_$childElement.getRootElementName().toUpperCase()_$util.resolveSpecialCharacters($childElement.getName()).toUpperCase() = "$childElement.getName()"#if($foreach.count != $extendedElement.getElements().size()),$newline#end
#end

}
#end

#end
