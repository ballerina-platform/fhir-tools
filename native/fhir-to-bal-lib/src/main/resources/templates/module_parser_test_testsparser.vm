// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.

// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.

import ballerina/log;
import $packageName;
import ballerina/test;


// Test functions
@test:Config {}
function parseWithoutModelTest() returns ${packageIdentifier}:FHIRParseError? {
    ${packageIdentifier}:Linkage pat = <${packageIdentifier}:Linkage> check parse(TEST_FHIR_RESOURCE_JSON_PATIENT_01);
    log:printDebug("Parsed linkage: " + pat.toBalString());
    test:assertEquals(pat, TEST_FHIR_RESOURCE_MODEL_PATIENT_01);
}

@test:Config {}
function test_parseByGivenModelTest() returns ${packageIdentifier}:FHIRParseError? {
    ${packageIdentifier}:Linkage pat = <${packageIdentifier}:Linkage> check parse(TEST_FHIR_RESOURCE_JSON_PATIENT_01, ${packageIdentifier}:Linkage);
    log:printDebug("Parsed linkage: " + pat.toBalString());
    test:assertEquals(pat, TEST_FHIR_RESOURCE_MODEL_PATIENT_01);
}

@test:Config {}
function test_parseInvalidResourceTest() {
    anydata|${packageIdentifier}:FHIRParseError pat = parse(TEST_FHIR_RESOURCE_JSON_INVALID_PATIENT_01);
    if pat is ${packageIdentifier}:FHIRParseError {
        ${packageIdentifier}:FHIRIssueDetail expectedIssueDetail = {
            severity: "error",
            code: "processing",
            details: (),
            diagnostic: "{ballerina/lang.value}ConversionError",
            expression: ()
        };
        ${packageIdentifier}:FHIRErrorDetail & readonly errorDetail = pat.detail();

        test:assertEquals(pat.message(), "Failed to parse request body as JSON resource", "Unexpected error message");
        test:assertEquals(errorDetail.httpStatusCode, 400, "Error status code must be 400");
        test:assertEquals(errorDetail.internalError, false, "Error should not be an internal error");
        test:assertNotEquals(errorDetail.uuid, null, "Error UUID must present");
        test:assertEquals(errorDetail.issues[0], expectedIssueDetail, "Mismatching error detail");
    } else {
        test:assertFail("Expect to fail since malformed FHIR resource payload");
    }
}
