// Copyright (c) ${licenseYear}, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

#foreach($import in $imports)
#if($import)
import $import;
#end
#end

#foreach ($mapEntry in $datatypeContext.entrySet())
@${util.getBasePackageIdentifier()}DataTypeDefinition {
    name: "${mapEntry.value.annotation.name}",
    baseType: (),
    #set($elementEntries = $mapEntry.value.annotation.elements.entrySet())
    #set($i = 0)
    #set($len = $elementEntries.size())
    elements: {
        #foreach ($elementMapEntry in $elementEntries)
        #if($elementMapEntry)
        "${elementMapEntry.value.name}": {
        name: "${elementMapEntry.value.name}",
        dataType: ${elementMapEntry.value.getDataTypeWithImportPrefix()},
        min: ${elementMapEntry.value.min},
        max: ${elementMapEntry.value.max},
        isArray: ${elementMapEntry.value.isArray()},
        description: "${elementMapEntry.value.description}",
        path: "${elementMapEntry.value.path}"
        }#if($i < $len - 1),#end
            #set($i = $i + 1)

        #end
        #end
    },
    serializers: {
        'xml: ${util.getBasePackageIdentifier()}complexDataTypeXMLSerializer,
        'json: ${util.getBasePackageIdentifier()}complexDataTypeJsonSerializer
    }
}
public type ${mapEntry.value.name} record {|
#if($util.isTypeInclusion($mapEntry.value.baseDataType))
    *$util.getTypeWithImport($mapEntry.value.baseDataType);
#end
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    ${util.getBasePackageIdentifier()}Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)
#foreach ($elementMapEntry in ${mapEntry.value.elements.entrySet()})
#if($elementMapEntry && $elementMapEntry.value.max != 0)
    ${util.getTypeWithImport($util.mapToValueSetDatatype($mapEntry.value.baseDataType, $elementMapEntry.value.name, $elementMapEntry.value.dataType))}#if($elementMapEntry.value.isArray())[]#end ${elementMapEntry.value.name}#if(!$elementMapEntry.value.isRequired())?#end;
#end
#end
|};

#foreach ($elementMapEntry in ${mapEntry.value.extendedElements.entrySet()})
#if($elementMapEntry.value.getBalDataType().getType() == 'enum')
public enum $elementMapEntry.value.typeName {
    #set($childEntries = $elementMapEntry.value.elements.entrySet())
    #set($i = 0)
    #set($len = $childEntries.size())
    #foreach ($childElementMapEntry in $childEntries)
    CODE_${elementMapEntry.value.typeName.toUpperCase()}_$util.resolveSpecialCharacters($childElementMapEntry.key.toUpperCase()).toUpperCase() = "$childElementMapEntry.key"#if($i < $len - 1),#end
        #set($i = $i + 1)
    #end
};

#end
#end
#end
