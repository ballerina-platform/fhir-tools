// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.

// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.

// AUTO-GENERATED FILE.
// This file is auto-generated by WSO2 Healthcare.

#foreach($import in $imports)
#if($import)
import $import.toString();
#end
#end

#if($isBasePackage)
# Terminology processor instance
public final TerminologyProcessor terminologyProcessor = new();

# FHIR registry instance
public final FHIRRegistry fhirRegistry = new();

# Modifier to Search parameter compatibility mapping
final readonly & ModifierMap SEARCH_PARAM_MODIFIER_MAP = {
    modifierTypeMapping: {
        "above" : [REFERENCE, TOKEN, URI],
        "below" : [REFERENCE, TOKEN, URI],
        "code-text" : [REFERENCE, TOKEN],
        "contains" : [STRING, URI],
        "exact": [STRING],
        "identifier": [REFERENCE],
        "in": [TOKEN],
        "missing": [DATE, NUMBER, QUANTITY, REFERENCE, STRING, TOKEN, URI],
        "not": [TOKEN],
        "not-in": [REFERENCE, TOKEN],
        "of-type": [TOKEN],
        "text": [REFERENCE, TOKEN, STRING],
        "text-advanced": [REFERENCE, TOKEN]
    }
};

# Search Parameters for all resources
final readonly & map<CommonSearchParameterDefinition> COMMON_SEARCH_PARAMETERS = {
    "_id": {
            name: "_id",
            'type: TOKEN,
            base: ["Resource"],
            expression: "Resource.id",
            default: (),
            effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
            preProcessor: (),
            postProcessor:  ()
    },
    "_lastUpdated": {
        name: "_lastUpdated",
        'type: DATE,
        base: ["Resource"],
        expression: "Resource.meta.lastUpdated",
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: (),
        postProcessor:  ()
    },
    "_tag": {
        name: "_tag",
        'type: TOKEN,
        base: ["Resource"],
        expression: "Resource.meta.tag",
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: (),
        postProcessor:  ()
    },
    "_profile": {
        name: "_profile",
        'type: URI,
        base: ["Resource"],
        expression: "Resource.meta.profile",
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: _profileSearchParamPreProcessor,
        postProcessor:  ()
    },
    "_security": {
        name: "_security",
        'type: TOKEN,
        base: ["Resource"],
        expression: "Resource.meta.security",
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: (),
        postProcessor:  ()
    },
    "_source": {
        name: "_source",
        'type: URI,
        base: ["Resource"],
        expression: "Resource.meta.source",
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: (),
        postProcessor:  ()
    },
    "_text": {
        name: "_text",
        'type: STRING,
        base: ["DomainResource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: (),
        postProcessor:  ()
    },
    "_content": {
        name: "_content",
        'type: STRING,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: (),
        postProcessor:  ()
    },
    "_list": {
        name: "_list",
        'type: TOKEN,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: (),
        postProcessor:  ()
    },
    "_has": {
        name: "_has",
        'type: COMPOSITE,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: (),
        postProcessor:  ()
    },
    "_type": {
        name: "_type",
        'type: TOKEN,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: (),
        postProcessor:  ()
    }
};

# Search Parameter to control search results
final readonly & map<CommonSearchParameterDefinition> CONTROL_SEARCH_PARAMETERS = {
    "_sort": {
        name: "_sort",
        'type: STRING,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_SEARCH_RESULT,
        preProcessor: (),
        postProcessor:  ()
    },
    "_count": {
        name: "_count",
        'type: NUMBER,
        base: ["Resource"],
        expression: (),
        default: 10,
        effectiveLevel: SEARCH_PARAM_CATEGORY_SEARCH_RESULT,
        preProcessor: paginationSearchParamPreProcessor,
        postProcessor: paginationSearchParamPostProcessor
    },
    "_offset": {
        name: "_offset",
        'type: NUMBER,
        base: ["Resource"],
        expression: (),
        default: 0,
        effectiveLevel: SEARCH_PARAM_CATEGORY_SEARCH_RESULT,
        preProcessor: paginationSearchParamPreProcessor,
        postProcessor: paginationSearchParamPostProcessor
    },
    "_include": {
        name: "_include",
        'type: TOKEN,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_SEARCH_RESULT,
        preProcessor: (),
        postProcessor:  ()
    },
    "_revinclude": {
        name: "_revinclude",
        'type: TOKEN,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_SEARCH_RESULT,
        preProcessor: (),
        postProcessor:  ()
    },
    "_summary": {
        name: "_summary",
        'type: TOKEN,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_SEARCH_RESULT,
        preProcessor: (),
        postProcessor:  ()
    },
    "_elements": {
        name: "_elements",
        'type: STRING,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_SEARCH_RESULT,
        preProcessor: (),
        postProcessor:  ()
    },
    "_contained": {
        name: "_contained",
        'type: TOKEN,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_SEARCH_RESULT,
        preProcessor: (),
        postProcessor:  ()
    },
    "_containedType": {
        name: "_containedType",
        'type: TOKEN,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_SEARCH_RESULT,
        preProcessor: (),
        postProcessor:  ()
    }
};
#else
# Terminology processor instance
public final ${importIdentifier}TerminologyProcessor terminologyProcessor = ${importIdentifier}terminologyProcessor;

# FHIR registry instance
public final ${importIdentifier}FHIRRegistry fhirRegistry = ${importIdentifier}fhirRegistry;
#end

#set($range = [0..$searchParameterMaps])
#foreach($iteration in $range)
#set($start_index = $iteration*100)
#set($end_index = ($iteration+1)*100)
#if($end_index > $searchParams.size())#set($end_index = $searchParams.size())#end
#set($searchParamsTemp = $searchParams.subList($start_index, $end_index))
#set($map_index = $iteration+1)
//Number of search params in ${igCode}_IG_SEARCH_PARAMS_${map_index}  = $searchParamsTemp.size()
final readonly & map<${importIdentifier}FHIRSearchParameterDefinition[]> ${igCode}_IG_SEARCH_PARAMS_${map_index} = {
    #foreach($searchParamTypeList in $searchParamsTemp)
"$searchParamTypeList.values().toArray()[0].getName()": [
#foreach($searchParam in $searchParamTypeList.values())
        {
            name: "$searchParam.getName()",
            'type: ${importIdentifier}$searchParam.getType(),
            base: [#foreach($base in $searchParam.getBase())"$base"#if($foreach.count!=$searchParam.getBase().size()),#end#end],
            expression: "$searchParam.getExpression()"
        }#if($foreach.count!=$searchParamTypeList.values().size()),$newline#end
#end

    ]#if($foreach.count!=$searchParamsTemp.size()),$newline#end
    #end

};
#end

public json[] FHIR_VALUE_SETS = [];
public json[] FHIR_CODE_SYSTEMS = [];
