// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.

// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.

// AUTO-GENERATED FILE.
// This file is auto-generated by WSO2 Healthcare.

#foreach($import in $imports)
#if($import)
import $import.toString();
#end
#end
import ballerina/log;

const IG_FHIR_BASE = "$igName";

# Initializer for the module
# + return - returns error if error occurred
function init() returns ${importIdentifier}FHIRError? {
    // Anything to initialize should happen here here

    //update terminology processor
    // TODO: https://github.com/wso2-enterprise/open-healthcare/issues/1047
    ${importIdentifier}InMemoryTerminologyLoader terminologyLoader = new(FHIR_CODE_SYSTEMS, FHIR_VALUE_SETS);
    ${importIdentifier}Terminology terminology = check terminologyLoader.load();

    readonly & ${importIdentifier}IGInfoRecord baseIgRecord = {
        title: "$igTitle",
        name: "$igName",
        terminology: terminology,
        profiles: {
#foreach($profile in $profiles)
#if(!$profile.getResourceType().equals("Bundle"))
        "$profile.getProfile().trim()": {
            url: "$profile.getProfile()",
            resourceType: "$profile.getResourceType()",
            modelType: $util.resolveSpecialCharacters($profile.getResourceName())
        }#if($foreach.count!=$profiles.size()),$newline#end
#end
#end

        },
        #set($range = [0..$searchParameterMaps])
        #set($endIdx = $searchParameterMaps + 1)
searchParameters: [#foreach($iteration in $range)#set($map_index = $iteration+1)${igCode.toUpperCase()}_IG_SEARCH_PARAMS_${map_index}#if($foreach.count!=$endIdx), #end#end]
    };
    ${importIdentifier}FHIRImplementationGuide baseImplementationGuide = new(baseIgRecord);
    check fhirRegistry.addImplementationGuide(baseImplementationGuide);

    log:printInfo("FHIR R4 ${igCode} Module initialized.");
}
