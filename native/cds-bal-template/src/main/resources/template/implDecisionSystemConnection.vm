##/*
##* Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org).
##*
##* WSO2 LLC. licenses this file to you under the Apache License,
##* Version 2.0 (the "License"); you may not use this file except
##* in compliance with the License.
##* You may obtain a copy of the License at
##*
##* http://www.apache.org/licenses/LICENSE-2.0
##*
##* Unless required by applicable law or agreed to in writing,
##* software distributed under the License is distributed on an
##* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
##* KIND, either express or implied. See the License for the
##* specific language governing permissions and limitations
##* under the License.
##*/

import ballerinax/health.fhir.cds;

# ====================================== Please do your implementations to the below methods ===========================
#
# Consider the below steps while do your implementations.
#
# 1. Map the received CdsRequest/ Feedback request to the custom payload format, if needed (Optional).
# 2. Implement the connectivity with your external decision support systems.
# 3. Send the CdsRequest/ Feedback request to appropriate external systems.
# 4. Get the response.
# 5. Map the received response to the CdsCards and Cds actions.
# 6. Return the CdsResponse to the client.
#
# ======================================================================================================================


#set ($map = $service.getCdsHooks())
#foreach($mapEntry in $map.entrySet())
# Handle decision service connectivity.
#
# + cdsRequest - CdsRequest to sent to the backend.
# + hookId - ID of the hook being invoked.
# + return - return CdsResponse or CdsError
isolated function connectDecisionSystemFor$mapEntry.key#[[(]]#cds:CdsRequest cdsRequest, string hookId) returns cds:CdsResponse|cds:CdsError {
    return cds:createCdsError(string `Rule repository backend not implemented/ connected yet for ${hookId}`, 501);
}

# Handle feedback service connectivity.
#
# + feedback - Feedback record to be processed.
# + hookId - ID of the hook being invoked.
# + return - return CdsError, if any.
isolated function connectFeedbackSystemFor$mapEntry.key (cds:Feedbacks feedback, string hookId) returns cds:CdsError? {
    return cds:createCdsError(string `Rule repository backend not implemented/ connected yet for ${hookId}`, 501);
}
#end
