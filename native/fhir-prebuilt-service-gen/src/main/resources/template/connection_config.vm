// Copyright (c) $currentYear, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.

// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.
//
//
// AUTO-GENERATED FILE.
//
// This file is auto-generated by Ballerina.
// Developers are allowed to modify this file as per the requirement.
import ballerina/os;
import ballerinax/health.clients.fhir;

configurable string base = os:getEnv("${serverName.toUpperCase()}_URL");
configurable string tokenUrl = os:getEnv("${serverName.toUpperCase()}_TOKEN_URL");
configurable string clientId = os:getEnv("${serverName.toUpperCase()}_APP_CLIENT_ID");
#if ($authMethod == "private_key_jwt")
configurable string keyFile = os:getEnv("${serverName.toUpperCase()}_APP_PRIVATE_KEY_FILE");

fhir:FHIRConnectorConfig serverConfig = {
    baseURL: base,
    mimeType: fhir:FHIR_JSON,
    authConfig: {
        clientId: clientId,
        tokenEndpoint: tokenUrl,
        keyFile: keyFile
    }
};
#elseif ($authMethod == "client_secret_basic")
configurable string clientSecret = os:getEnv("${serverName.toUpperCase()}_APP_CLIENT_SECRET");
configurable string scopes = os:getEnv("${serverName.toUpperCase()}_APP_SCOPES");
configurable string authzServerCert = os:getEnv("${serverName.toUpperCase()}_APP_CLIENT_CERT");
configurable string fhirServerCert = os:getEnv("${serverName.toUpperCase()}_FHIR_SERVER_CERT");

fhir:FHIRConnectorConfig serverConfig = {
    baseURL: base,
    mimeType: fhir:FHIR_JSON,
    authConfig: {
        tokenUrl: tokenUrl,
        clientId: clientId,
        clientSecret: clientSecret,
        scopes: scopes,
        clientConfig: {
            secureSocket: {
                cert: authzServerCert
            }
        }
    },
    secureSocket: {
        cert: fhirServerCert
    }
};
#end

final fhir:FHIRConnector fhirConnectorObj = check new (serverConfig);
